##
## These notes are specific to the BWH instantiation of NAP on ERIS 
## for the NSRR datasets
##

## e.g. to run NAP for an existing NSRR cohort

##
## your working folder
##

cd ~

##
## Clone copy of NSRR repository (or pull if already exists)
##

git clone https://gitlab.partners.org/nsrr/nsrr

##
## Create/go to NAP root folder
##

cd /data/nsrr/luna/output/cfs/cfs/

##
## Initially, this folder need not contain anything other
## than a sample list to the original NSRR data
## If it does not exist, create it.  e.g.
##

luna --build /data/nsrr/datasets/cfs/polysomnography/edfs/ \
             /data/nsrr/datasets/cfs/polysomnography/annotations-events-nsrr/ \
	          -ext=-nsrr.xml \
		       > s.lst

##
## Check configuration of NAP; if any changes/additions needed, add
## 4th arg to nap.sh (below) with an alternate .conf file
##

cat ~/nsrr/nap/default.conf 

##
## Ensure that the canonical signal definition are present and correct for this
## project
##

grep CFS ~/nsrr/common/sigs.canonical 

# i.e. will show this::
# %CFS
# CFS	EEG	C4	M1	100
# CFS	EMG	EMG1	EMG2	100
# CFS	LOC	E1,LOC	M2	100
# CFS	ROC	E2,ROC	M2	100
# CFS	ECG	ECG1	ECG2	100


##
## Run NAP, with the appropriate study TAG to match the sigs.canonical file
## (i.e. add to sigs.canonical as necessary; see the file for formats)
## If new canonical signals classes are required, let me know...
##

sh ~/nsrr/nap/nap.sh CFS /data/nsrr/luna/output/cfs/cfs/



##
## The above command will send jobs to the cluster;  use bjobs etc to monitor the 
## status.  When complete, you should be able to see the output via the shiny-app
## URL = https://shiny.partners.org/nsrr/
##  (need to be VPN'ed in)
##
## (Hopefully), the tables/figures generated by NAP should all appear in the Tables
## and Figures tabs/panels


##
## Coda: compiling cohort level information
##
## Using the dmerge tool
##
## Variable/factor definitions in the NSRR repo:  ~/nsrr/common/dict/
## Definition files have naming convention {domain}_{group}.txt
## See http://zzz.bwh.harvard.edu/luna/merge/merge for details
##

## dmerge has at least three arguments:
##  1) variable definition folder  (i.e.  ~/nsrr/common/dict/ )
##  2) the NAP output folder (i.e. in this example,  /data/nsrr/luna/output/cfs/cfs/nap/
##  3) the name of the text file that will be created: e.g. /data/nsrr/luna/output/cfs/cfs/nap/cfs-combined.txt
##  Also, a data-dictionary (that is specific to the output, e.g. cfs-combined.txt) is written to standard out,
##  so that should be saved alongside the data file: e.g.

/data/nsrr/bin/dmerge  ~/nsrr/common/dict/ \
                       /data/nsrr/luna/output/cfs/cfs/nap/ \
                       /data/nsrr/luna/output/cfs/cfs/cfs-combined.txt \
		       						              > /data/nsrr/luna/output/cfs/cfs/cfs-dict.txt

## Note: adding -v makes dmerge run in verbose mode, which can be
##       useful if the output is not as expected

## Note: adding -s makes dmerge run in striuct mode, which means that
##       undefined data files (any {domain}_{group}_{tag}*.txt files
##       the NAP folder) will generate an error, rather than being
##       skipped.  i.e. '-s' implies you want *everything* in the NAP
##       folder to be compiled, and to be properly documented in the
##       data dictionary

##
## Sample metrics for luna-shiny
##
## Finally, you can add special R files to the nap/ folder, to populate
## the Phenotype and Sample Metrics tabs of the luna-shiny app.   The
## information here can come from anywhere (i.e. can be external to the NAP
## run).  In additional, for the Sample Metrics, the individuals need not be
## present in the cohort of EDFs either (i.e. if you still want them to generate
## the 'normative' histograms in that tab
##


## Phenotypes:  the luna-shiny app will automatically load any file matching the pattern:
##
##              nap/_pheno*.RData
##
## e.g. nap_pheno-cfs.RData
##
## These files should be R files (i.e. from save() in R) that comprise a data frame with
## one column named ID;  that specifies the ID which will be linked to the ID in the
## sample list;   all other metrics will be tabulated for that individual.  That is, it
## is expected that these phenotype files will contain multiple individuals (rows), they
## do not need to be generated separately for each person


## Sample metrics: the luna-shiny app will automatically load any file matching the pattern:
##
##                 nap/_derived*.RData
##
## e.g. nap/_derived-cfs.RData
##
## This should also be R files, but with the same internal list-of-lists structure as used for the
## tables generated by NAP (see coda1.R and coda2.R).   That is:

## format expected by shiny app (w/ unique 'g's across files ):
##
## g1 <- list( desc = "group description" ,
##             d1 = list( desc = "description1" , data = data.frame() ) ,
##             d2 = list( desc = "description2" , data = data.frame() ) )
##
## g2 <- list( desc = "group description" ,
##             d1 = list( desc = "description1" , data = data.frame() ) ,
##             d2 = list( desc = "description2" , data = data.frame() ) )
##
##

##
## Each data frame element should have an ID field, that may match the IDs in the sample list (i.e.
## for the people w/ EDFs in this cohort).   In the shiny app, combo box menus are automatically created based
## on  - level 1 = the top level description,  e.g. g1$desc , g2$desc , ... 
##       level 2 = the second level, for a given group, e.g.  g1$d1$desc, g1$d2$desc, ... 
##       level 3 = the variables in a given data frame, e.g.  names( g1$d1$data ) 

## the labels g1, g2, and d1, d2, etc are arbitrary: use any sane, unique labels there
## the terms 'desc' and 'data', and the general list structure, are fixed: created files must conform to that spec.


##
## That's it...
##

##
## PS.

## 1) Naturally, I expect numerous bugs/glitches, etc will emerge,
##   which pls report, and these can be fixed as we go on

## 2) The current shiny-app is set up to work within the VPN, and
##   requires user NSRR group level access as it reads data from
##   /data/nsrr on ERIS.  We should think about how this can be expanded
##   to make this resource public.

## 3) Because of the above point, there is a mapping from the virtual host that runs
##    the shiny server, and the ERIS system.    Shyamal can point you to this / and
##    can add new studies etc to the /data/nsrr/luna/output/ folder we currently have

