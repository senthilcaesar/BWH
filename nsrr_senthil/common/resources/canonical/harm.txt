
% -------------------------------------------------------------------------
% NSRR harmonized EDF canonical signal definitions: unit definitions
% version v2.0, 7-Apr-2022
% -------------------------------------------------------------------------

% nb. first entry is always the preferred term

% Voltage units (first entry of list is the preferred term)

let volt  = V,volt

let mvolt = mV,millivolt,milli-volt,mvolt,m-volt

let uvolt = uV,microvolt,micro-volt,uvolt,u-volt


% -------------------------------------------------------------------------
% NSRR harmonized EDF canonical signal definitions: electroencephalography (EEG)
% version v2.0, 7-Apr-2022
% -------------------------------------------------------------------------

% -------------------------------------------------------------------------
%
% Variable definitions 
%
% -------------------------------------------------------------------------

% left mastoids
let left_mastoid=M1,M1_ref,M1-ref,EEG_M1,EEG_M1_REF,EEG_M1-REF
let left_mastoid=A1,A1_ref,A1-ref,EEG_A1,EEG_A1_REF,EEG_A1-REF

% right mastoids
let right_mastoid=M2,M2_ref,M2-ref,EEG_M2,EEG_M2_REF,EEG_M2-REF
let right_mastoid=A2,A2,A2_ref,A2-ref,EEG_A2,EEG_A2_REF,EEG_A2-REF

% linked mastoids (pre-computed)
let linked_mastoid=M1M2,A1A2,(M1+M2)/2,(A1+A2)/2,M1+M2,A1+A2

% linked mastoids (computed on-the-fly) nb. quoted "L,R" syntax
let linked_mastoid="M1,M2","M1_REF,M2_REF","M1-REF,M2-REF"
let linked_mastoid="EEG_M1,EEG_M2","EEG_M1_REF,EEG_M2_REF","EEG_M1-REF,EEG_M2-REF"
let linked_mastoid="A1,A2","A1_REF,A2_REF","A1-REF,A2-REF"
let linked_mastoid="EEG_A1,EEG_A2","EEG_A1_REF,EEG_A2_REF","EEG_A1-REF,EEG_A2-REF"

% channel w/ arbitrary recording reference
let left_central=C3,C3-ref,C3_ref,EEG_C3,EEG_C3_ref,EEG_C3-ref
let right_central=C4,C4-ref,C4_ref,EEG_C4,EEG_C4_ref,EEG_C4-ref
let midline_central=CZ,CZ-ref,CZ_ref,EEG_CZ,EEG_CZ_ref,EEG_CZ-ref

let left_frontal=F3,F3-ref,F3_ref,EEG_F3,EEG_F3_ref,EEG_F3-ref
let right_frontal=F4,F4-ref,F4_ref,EEG_F4,EEG_F4_ref,EEG_F4-ref
let midline_frontal=FZ,FZ-ref,FZ_ref,EEG_FZ,EEG_FZ_ref,EEG_FZ-ref

let left_parietal=P3,P3-ref,P3_ref,EEG_P3,EEG_P3_ref,EEG_P3-ref
let right_parietal=P4,P4-ref,P4_ref,EEG_P4,EEG_P4_ref,EEG_P4-ref
let midline_parietal=PZ,PZ-ref,PZ_ref,EEG_PZ,EEG_PZ_ref,EEG_PZ-ref

let left_temporal=T3,T3-ref,T3_ref,EEG_T3,EEG_T3_ref,EEG_T3-ref
let right_temporal=T4,T4-ref,T4_ref,EEG_T4,EEG_T4_ref,EEG_T4-ref
let midline_temporal=TZ,TZ-ref,TZ_ref,EEG_TZ,EEG_TZ_ref,EEG_TZ-ref

let left_occipital=O1,O1-ref,O1_ref,EEG_O1,EEG_O1_ref,EEG_O1-ref
let right_occipital=O2,O2-ref,O2_ref,EEG_O2,EEG_O2_ref,EEG_O2-ref
let midline_occipital=OZ,OZ-ref,OZ_ref,EEG_OZ,EEG_OZ_ref,EEG_OZ-ref

% pre-computed CM-referenced centrals (e.g. C3_M2)
let left_central_cm_ref=C3_M2,C3-M2,C3/M2,EEG_C3-M2,EEG_C3_M2,EEG_C3/M2
let left_central_cm_ref=C3_A2,C3-A2,C3/A2,EEG_C3-A2,EEG_C3_A2,EEG_C3/A2
let right_central_cm_ref=C4_M1,C4-M1,C4/M1,EEG_C4-M1,EEG_C4_M1,EEG_C4/M1
let right_central_cm_ref=C4_A1,C4-A1,C4/A1,EEG_C4-A1,EEG_C4_A1,EEG_C4/A1

let left_frontal_cm_ref=F3_M2,F3-M2,F3/M2,EEG_F3-M2,EEG_F3_M2,EEG_F3/M2
let left_frontal_cm_ref=F3_A2,F3-A2,F3/A2,EEG_F3-A2,EEG_F3_A2,EEG_F3/A2
let right_frontal_cm_ref=F4_M1,F4-M1,F4/M1,EEG_F4-M1,EEG_F4_M1,EEG_F4/M1
let right_frontal_cm_ref=F4_A1,F4-A1,F4/A1,EEG_F4-A1,EEG_F4_A1,EEG_F4/A1

let left_parietal_cm_ref=P3_M2,P3-M2,P3/M2,EEG_P3-M2,EEG_P3_M2,EEG_P3/M2
let left_parietal_cm_ref=P3_A2,P3-A2,P3/A2,EEG_P3-A2,EEG_P3_A2,EEG_P3/A2
let right_parietal_cm_ref=P4_M1,P4-M1,P4/M1,EEG_P4-M1,EEG_P4_M1,EEG_P4/M1
let right_parietal_cm_ref=P4_A1,P4-A1,P4/A1,EEG_P4-A1,EEG_P4_A1,EEG_P4/A1

let left_temporal_cm_ref=T3_M2,T3-M2,T3/M2,EEG_T3-M2,EEG_T3_M2,EEG_T3/M2
let left_temporal_cm_ref=T3_A2,T3-A2,T3/A2,EEG_T3-A2,EEG_T3_A2,EEG_T3/A2
let right_temporal_cm_ref=T4_M1,T4-M1,T4/M1,EEG_T4-M1,EEG_T4_M1,EEG_T4/M1
let right_temporal_cm_ref=T4_A1,T4-A1,T4/A1,EEG_T4-A1,EEG_T4_A1,EEG_T4/A1

let left_occipital_cm_ref=O1_M2,O1-M2,O1/M2,EEG_O1-M2,EEG_O1_M2,EEG_O1/M2
let left_occipital_cm_ref=O1_A2,O1-A2,O1/A2,EEG_O1-A2,EEG_O1_A2,EEG_O1/A2
let right_occipital_cm_ref=O2_M1,O2-M1,O2/M1,EEG_O2-M1,EEG_O2_M1,EEG_O2/M1
let right_occipital_cm_ref=O2_A1,O2-A1,O2/A1,EEG_O2-A1,EEG_O2_A1,EEG_O2/A1


% pre-computed LM-referenced central (e.g. C3_LM)
let left_central_lm_ref=C3_LM,C3-LM,C3/LM,EEG_C3-LM,EEG_C3_LM,EEG_C3/LM
let right_central_lm_ref=C4_LM,C4-LM,C4/LM,EEG_C4-LM,EEG_C4_LM,EEG_C4/LM
let midline_central_lm_ref=CZ_LM,CZ-LM,CZ/LM,EEG_CZ-LM,EEG_CZ_LM,EEG_CZ/LM

let left_frontal_lm_ref=F3_LM,F3-LM,F3/LM,EEG_F3-LM,EEG_F3_LM,EEG_F3/LM
let right_frontal_lm_ref=F4_LM,F4-LM,F4/LM,EEG_F4-LM,EEG_F4_LM,EEG_F4/LM
let midline_frontal_lm_ref=FZ_LM,FZ-LM,FZ/LM,EEG_FZ-LM,EEG_FZ_LM,EEG_FZ/LM

let left_parietal_lm_ref=P3_LM,P3-LM,P3/LM,EEG_P3-LM,EEG_P3_LM,EEG_P3/LM
let right_parietal_lm_ref=P4_LM,P4-LM,P4/LM,EEG_P4-LM,EEG_P4_LM,EEG_P4/LM
let midline_parietal_lm_ref=PZ_LM,PZ-LM,PZ/LM,EEG_PZ-LM,EEG_PZ_LM,EEG_PZ/LM

let left_temporal_lm_ref=T3_LM,T3-LM,T3/LM,EEG_T3-LM,EEG_T3_LM,EEG_T3/LM
let right_temporal_lm_ref=T4_LM,T4-LM,T4/LM,EEG_T4-LM,EEG_T4_LM,EEG_T4/LM
let midline_temporal_lm_ref=TZ_LM,TZ-LM,TZ/LM,EEG_TZ-LM,EEG_TZ_LM,EEG_TZ/LM

let left_occipital_lm_ref=O1_LM,O1-LM,O1/LM,EEG_O1-LM,EEG_O1_LM,EEG_O1/LM
let right_occipital_lm_ref=O2_LM,O2-LM,O2/LM,EEG_O2-LM,EEG_O2_LM,EEG_O2/LM
let midline_occipital_lm_ref=OZ_LM,OZ-LM,OZ/LM,EEG_OZ-LM,EEG_OZ_LM,EEG_OZ/LM


% -------------------------------------------------------------------------
%
% Rules
%
% -------------------------------------------------------------------------

%
% central CM-referenced
%

C3_M2
 req:
  sig = left_central_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C3_M2
 req:
  sig = left_central
  ref = right_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C4_M1
 req:
  sig = right_central_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C4_M1
 req:
  sig = right_central
  ref = left_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

%
% central LM-referenced
%

C3_LM
 req:
  sig = left_central_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C3_LM
 req:
  sig = left_central
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C4_LM
 req:
  sig = right_central_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C4_LM
 req:
  sig = right_central
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


%
% Frontals
%

F3_M2
 req:
  sig = left_frontal_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F3_M2
 req:
  sig = left_frontal
  ref = right_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F4_M1
 req:
  sig = right_frontal_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F4_M1
 req:
  sig = right_frontal
  ref = left_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

%
% frontal LM-referenced
%

F3_LM
 req:
  sig = left_frontal_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F3_LM
 req:
  sig = left_frontal
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F4_LM
 req:
  sig = right_frontal_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F4_LM
 req:
  sig = right_frontal
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


%
% Occipitals
%

O1_M2
 req:
  sig = left_occipital_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O1_M2
 req:
  sig = left_occipital
  ref = right_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O2_M1
 req:
  sig = right_occipital_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O2_M1
 req:
  sig = right_occipital
  ref = left_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

%
% occipital LM-referenced
%

O1_LM
 req:
  sig = left_occipital_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O1_LM
 req:
  sig = left_occipital
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O2_LM
 req:
  sig = right_occipital_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O2_LM
 req:
  sig = right_occipital
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


%
% Midline LM-referenced channels
%

CZ_LM
 req:
  sig = midline_central_lm_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

CZ_LM
 req:
  sig = midline_central
  ref = linked_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

% frontal

FZ_LM
 req:
  sig = midline_frontal_lm_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

FZ_LM
 req:
  sig = midline_frontal
  ref = linked_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


% parietal

PZ_LM
 req:
  sig = midline_parietal_lm_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

PZ_LM
 req:
  sig = midline_parietal
  ref = linked_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  trans = xyz,*
  scale = AC
 set:
  unit = uV

% occipital

OZ_LM
 req:
  sig = midline_occipital_lm_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

OZ_LM
 req:
  sig = midline_occipital
  ref = linked_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


% -------------------------------------------------------------------------
%
% EOG channels; preferred both referenced against M2
%
% -------------------------------------------------------------------------

%% aliases

% EOG against recording reference
let left_eog=E1,E1,LOC,EOG-L,L-EOG,EOG_Left,EOG_L,LEOG,EOG(L)
let left_eog=EEG_E1,EOG_E1
let left_eog=EOG_L_Ref

let right_eog=E2,ROC,EOG-R,R-EOG,EOG_Right,EOG_R,REOG,EOG(R)
let right_eog=EEG_E2,EOG_E2
let right_eog=EOG_R_Ref

% EOG against *right* mastoid ref
let left_eog_right_mastoid_ref=E1_M2,E1-M2,E1_M2,E1_A2,E1-A2
let left_eog_right_mastoid_ref=EOG_LOC-M2,EOG_LOC_M2,LOC/M2,LOC-M2,LOC_M2,EOGL-M2
let left_eog_right_mastoid_ref=EOG_LOC-A2,EOG_LOC_A2,LOC/A2,LOC-A2,LOC_A2,EOGL-A2

let right_eog_right_mastoid_ref=E2_M2,E2-M2,E2_M2,E2_A2,E2-A2
let right_eog_right_mastoid_ref=EOG_ROC-M2,EOG_ROC_M2,ROC/M2,ROC-M2,ROC_M2,EOGR-M2
let right_eog_right_mastoid_ref=EOG_ROC-A2,EOG_ROC_A2,ROC/A2,ROC-A2,ROC_A2,EOGR-A2

% also include right EOG against left ref.
let right_eog_left_mastoid_ref=E2_M1,E2-M1,E2_M1,E2_A1,E2-A1
let right_eog_left_mastoid_ref=EOG_ROC-M1,EOG_ROC_M1,ROC/M1,ROC-M1,ROC_M1,EOGR-M1
let right_eog_left_mastoid_ref=EOG_ROC-A1,EOG_ROC_A1,ROC/A1,ROC-A1,ROC_A1,EOGR-A1

%% rules
% AASM standard has LOC and ROC both referenced against M2
% but include E2_M1 as a replacement for E2-M2, if the latter is not available

LOC
 req:
  sig = left_eog_right_mastoid_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

LOC
 req:
  sig = left_eog
  ref = right_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

LOC
 req:
  sig = left_eog
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

% ROC - preferred also against right M2

ROC
 req:
  sig = right_eog_right_mastoid_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

ROC
 req:
  sig = right_eog
  ref = right_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

% ROC - alternativly, against left M1

ROC
 req:
  sig = right_eog_left_mastoid_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

ROC
 req:
  sig = right_eog
  ref = left_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

% also, if no mastoids present, assume any match is
% already re-referenced, even if that is not explicit in
% the name

LOC
 req:
  sig = left_eog
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

ROC
 req:
  sig = right_eog
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

% -------------------------------------------------------------------------
%
% Surface electromyography (EMG) 
%
% assumes 1,2,3 = C,L,R
% assumes L-R and R-L are equivalent, etc
% -------------------------------------------------------------------------

let central_chin=EMG1,Chin1,Chin1_EMG,Chin-C,EMG/C,C_Chin,CCHin,Chin-Ctr
let left_chin=EMG2,Chin2,Chin2_EMG,Chin-L,EMG/L,L_Chin,LChin
let right_chin=EMG3,Chin3,Chin3_EMG,Chin-R,EMG/R,R_Chin,RChin

let chin_left_central=chinI,Chin1-Chin2,Chin_1-Chin_2,EMG1-EMG2,EMG_Chin1-Chin2,CChin-LChin,C_Chin-L_Chin,EMG_Chin1_Chin2
let chin_left_central=Chin2-Chin1,Chin_2-Chin_1,EMG2-EMG1,EMG_Chin2-Chin1,LChin-CChin,L_Chin-C_Chin,EMG_Chin2_Chin1

let chin_right_central=chinII,Chin1-Chin3,Chin_1-Chin_3,EMG1-EMG3,EMG_Chin1-Chin3,CChin-RChin,C_Chin-R_Chin,EMG_Chin1_Chin3
let chin_right_central=Chin3-Chin1,Chin_3-Chin_1,EMG3-EMG1,EMG_Chin3-Chin1,RChin-CChin,R_Chin-C_Chin,EMG_Chin3_Chin1

let chin_left_right=chinIII,Chin2-Chin3,Chin_2-Chin_3,EMG2-EMG3,EMG_Chin2-Chin3,LChin-RChin,L_Chin-R_Chin,EMG_Chin2_Chin3
let chin_left_right=chinIII=Chin3-Chin2,Chin_3-Chin_2,EMG3-EMG2,EMG_Chin3-Chin2,RChin-LChin,R_Chin-L_Chin,EMG_Chin3_Chin2

let chin=chin,EMG,EMG_chin,Chin_EMG,Chin_EMG_Gnd

EMG
 req:
  sig = chin_left_central,chin_right_central
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

EMG
 req:
  sig = left_chin,right_chin
  ref = central_chin
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

EMG
 req:
  sig = left_chin
  ref = right_chin
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

EMG
 req:
  sig = chin
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV
% -------------------------------------------------------------------------
%
% Electrocardiography (2 or 3-channel PSG ECG)
%
% -------------------------------------------------------------------------

% electrodes

let RA_electrode=RA,ECG1,EKG1,ECG_R,ECGR,EKGR,ECG1-REF,ECG1_REF
let LA_electrode=LA,ECG2,EKG2,ECG_L,ECGL,EKGL,ECG1-REF,ECG2_REF
let LL_electrode=LL,ECG3,EKG3,ECG_LL,ECG1-REF,ECG2_REF

% leads; if a single ECG channel present, assume is lead I bipolar  
% othewise, create explicitly from the existing channels

let ecg_lead1=ECG_LA-RA,ECG1-ECG2

ECG
 req:
  sig = ecg_lead1
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV

ECG
 req:
  sig = ECG,EKG
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV

ECG
 req:
  sig = LA_electrode
  ref = RA_electrode
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV

ECG
 req:
  sig = LL_electrode
  ref = RA_electrode
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV

ECG
 req:
  sig = LL_electrode
  ref = LA_electrode
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV



% nb. other labels observed:
% ECG_EKG2_EKG
% ECG1-ECG2,EKG1-EKG2,ECG_L-ECG_R
% ECG1,ECG_I,ECGL,ECG_L,ECGI,EKG1,EKG_I,EKGL,EKG_L,EKGI
% ECG2,ECG_II,ECGR,ECG_R,ECGII,EKG2,EKG_II,EKGR,EKG_R,EKGII
% ECG,EKG
% ECG1,ECG_L,ECGL,ECGI,ECG_I,EKGL,EKG_L,EKGI,EKG_I
% ECG2,ECG_R,ECGR,ECGII,ECG_II,EKGR,EKG_R,EKGII,EKG_II
% ECG3,ECG_V


% -------------------------------------------------------------------------
%
% Respiratory effort (thoracic and abdominal)
%
% -------------------------------------------------------------------------

let abdomen=abdomen,ABD,Abdmn,Abdo,ABDOM,Abdomen,Abdomen.1,Abd.1,Abd2,Abdominal
let abdomen=Effort_ABD,ABDO_EFFORT,A-Effort,Abdomen_EG,Resp_Abdominal,Abdo_Res,Resp_Abdomen,EEG_Abd

let thorax=thorax,Thorax.1,Thoracic,THOR_RES,Thor,Thorax_EG,THO,THOR_EFFORT,Effort_THO,Resp_Thoracic
let thorax=Chest,Chest1,Resp_Chest,EEG_Chest,RIB_CAGE

let sum=sum,Subm,THOR+ABDO,Sum_

% rules (note: variables are not expanded for canonical channel labels)

abdomen
 req:
  sig = abdomen

thorax
 req:
  sig = thorax

sum
 req:
  sig = sum

% -------------------------------------------------------------------------
%
% Airflow: thermister & nasal pressure cannula
%
% -------------------------------------------------------------------------

% thermistor

let therm=therm,TERM,Thermistor,Oral_Thermistor,Nasal/Oral,Aux_AC,EEG_Therm,Thermistor_EG


% nasal pressure transducer

let nas_pres=CannulaFlow,CanulaFlow,Cannula,Cannula_Flow,CannulaFow,CannnulaFlow,CannlulaFlow,CannualFlow
let nas_pres=CannulaNasal,Nasal_Cannula,NASAL_PRES,Nasal_Pressure
let nas_pres=Nasal,Nasal.1,NasalP,NASAL_PRESS,PNasal,NASAL_FLOW,Nasal_EG,nFlow
let nas_pres=NPAF,NP,NPV,NPV_flow,PN,NAF,PNEUMFLOW,PTAF,Ptrans,Prongs,Pressure,Pres


% Unspecified airflow channels (info may be in the transducer fields)

let airflow=airflow,flow,Airflow,Flow_A10,Flow_CU,Flow_Patient
let airflow=air,Airflow1,AIR_FLOW,Flow_EG,Flo
let airflow=Resp_Airflow,Resp_Flow,Resp_FLOW-Ref,Resp_Airflow+-Re

% rules
% TODO: add in transducer rules for generic airflow channels

therm
 req:
  sig = therm

nas_pres
 req:
  sig = nas_pres

airflow
 unless:
  therm
  nas_pres
 req:
  sig = airflow


% -------------------------------------------------------------------------
%
% Oxygen saturation (SpO2)
%
% -------------------------------------------------------------------------

let SpO2=SpO2,SAO2,SAT,SpO2_EG,SA02,SO02,PaO2

SpO2
 req:
  sig = SpO2


% -------------------------------------------------------------------------
%
% (Derived) Heart rate (BPM) 
%
% -------------------------------------------------------------------------

let HR=HR,BPM,HEARTRATE,Heart_Rate,Heart_Rate_CU,HRate,H.R.,DHR

HR
 req:
  sig = HR

% -------------------------------------------------------------------------
%
% Plethysmography (volume of blood, from oximetry signal)
%
% -------------------------------------------------------------------------

let pleth=pleth,Plethysmogram,Plesmo,PlethWV,RD-Pleth,RD-Pleth_EG

pleth
 req:
  sig = pleth


% -------------------------------------------------------------------------
%
% Pulse
%
% -------------------------------------------------------------------------

let pulse=pulse,PR,Puls,Pulse_Rate,PulseRate,Pulse_EG,Pluse

pulse
 req:
  sig = pulse
% -------------------------------------------------------------------------
%
% Surface EMG monitoring of limb muscles
%
% -------------------------------------------------------------------------

let left_leg1=EEG_LLeg1,LLEG1,LEFT_LEG1,L_LEG1,L_LEG_1,LLeg3,LegsL_Leg1 
let left_leg2=EEG_LLeg2,LLEG2,LEFT_LEG2,L_LEG2,L_LEG_2,LLeg4
let right_leg1=RLEG1,RIGHT_LEG1,EEG_RLeg1,R_LEG1,R_LEG_1,RLeg5
let right_leg2=RLEG2,RIGHT_LEG2,EEG_RLeg2,R_LEG2,R_LEG_2,RLeg6
let left_right_leg=lleg_r,lleg1_2

% pre-computed bilateral LATs and RATs
let left_leg=LLEG,L_LEG,LLeg1_LLeg2,LEFT,Leg_Ltibial,L_Legs,lleg1_2,EMG_LLEG_LLEG2,EMG_LLEG__LLEG_, EMG_LAT1_LAT2,LAT1_LAT2


let right_leg=RLEG,R_LEG,RLEG1_RLeg2,Leg_Rtibial,RIGHT,R_Legs,rleg1_2,EMG_RLEG_RLEG2,EMG_RLEG__RLEG_,EMG_RAT1_RAT2, RAT1_RAT2

%piezo monitoring of limb muscles
let left_leg_piezo=L_Leg, lleg,Leg_L,LegL
let right_leg_piezo=R_Leg, rleg,Leg_R,LegR
let leg_piezo=Leg

let left_leg1_unknown=LLeg1,leg_1,Leg_12
let left_leg2_unknown=LLeg2,Leg_2,Leg_22
let right_leg1_unknown=rleg1
let right_leg2_unknown=RLeg2
let left_leg_unknown=LLeg1,LLEG,L_Leg,LAT,Leg_L_LEG
let right_leg_unknown=RLeg,R_Leg,RAT
let left_right_unknown=lleg_r,EMG_LLeg_RLeg

% rules


LAT
 req:
  sig = left_leg1
  ref = left_leg2

RAT
 req:
  sig = right_leg1
  ref = right_leg2

LAT-RAT
 req:
  sig = left_right_leg
   

LAT
 req:
  sig = left_leg
  
RAT
 req:
  sig = right_leg

LAT_piezo
 req:
  sig = left_leg_piezo

RAT_piezo
 req:
  sig = right_leg_piezo
  
LEG_piezo
 req:
  sig = leg_piezo
  
LAT_unknown
 req:
  sig = left_leg1_unknown
  ref = left_leg2_unknown

RAT_unknown
 req:
  sig = right_leg1_unknown
  ref = right_leg2_unknown
  
LAT_unknown
 req:
  sig = left_leg_unknown

RAT_unknown
 req:
  sig = right_leg_unknown
 
  
LAT-RAT_unknown
 req:
  sig = left_right_unknown


LET
 unless:
  LAT
  RAT
 req:
  sig = leg_unspecified

% -------------------------------------------------------------------------
%
% Misc. channels
%
% -------------------------------------------------------------------------


% Capnogram (capnography wave form)

cap
 req:
  sig = cap,capno

% End tidal CO2 (derived value from capnography)

EtCO2
 req:
  sig = EtCO2,CO2_EndTidal,EtC02


% Body position

pos
 req:
  sig = pos,position,Body,Pos_Sensor,Position_CU,PositionSen,PosSensor,Pt_Position
  sig = BPOSdc1,BPOSdc2,Compumedics_Body,POSdc,POSdc1,Compumedics_Posi
  sig = Positon,Postion,Postition
  sig = Pro_Tech_Positio,ProTech_Positio,ProTechPositione
% -------------------------------------------------------------------------
%
% Sound recording / snore channels
%
% -------------------------------------------------------------------------

sound
 req:
  sig = Mic,SOUND
  sr-max = 500
  
snore
 req:
  sig = snore,Snore_CU,Snore_EG,Snorealias
% -------------------------------------------------------------------------
%
% CPAP channels 
%
% -------------------------------------------------------------------------

% most relevant to ABC, HomePAP studies

let cpap_flow=cpap_flow,pap_flow,CPAPFLOW,CPAP,CPAP.1,CPAP.2,CPAP.3,PAP.1,
let cpap_flow=CFlow,C-flow,PAPFlow,maskflow,Mask_Flow,PAP_Patient_Flow,EPAP,PAP_FLOW

let cpap_pres=pap_pres,Pmask,Pap,C-Pres,CPress,CPAP_Pressure,CPAPPressure,CPAP_Press
let cpap_pres=CPRES,C-Pressure,PAPPress,PAP_Pressure,PAP_Press
let cpap_pres=xPAP_EPAP,xPAP_IPAP,xPAP,xPAP_CPAP,Pressure
let cpap_pres=Mask,CPAPMask

% rules

cpap_flow
 req:
  sig = cpap_flow

cpap_pressure
 req:
  sig = cpap_pressure
